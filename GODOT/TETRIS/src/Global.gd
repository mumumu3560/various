extends Node2D

#今スポーンしているかどうかを確かめる。ミノの接地が終わればfalseになり、スポーンしたらtrueになる。
var spawn_now = false

#ここに盤面の状態を2次元配列で保存したい。
#0→なにもない、1→壁、2~8→テトリミノが設置されている
#グリッドは12×23。上方向(23の方)が長いのはミノの出現を考えた結果
#ここにはL,J,S,Z,T,O,Iの7種類で数字を入れる。
#L→2、J→3、S→4、Z→5、T→6、O→7、I→8
#ミノが落下した後やラインが消去された場合に、gridを変化させる→数字に対応したブロックをその座標に入れる。という操作を行う。
var tetris_grid = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],#0
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#1
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#2
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#3
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#4
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#5
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#6
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#7
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#8
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#9
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#10
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1] #11
]

var tetris_grid_keep = tetris_grid.duplicate(true)

#ミノを設置したときのあれこれがよくわからんからGlobalを経由してやる。
#上から設置するミノの種類。ミノのx,y座標、回転角
var minoGD_mino
var minoGD_posX
var minoGD_posY
var minoGD_rot
var minoGD_list
var aaa = false
var hold_now = false
var bbb = false
var appear_mino = "empty"


#var original_minos = ["l_mino", "j_mino", "s_mino", "z_mino", "t_mino", "o_mino", "i_mino"]
#0:L, 1:J, S:2, Z:3, T:4, O:5, I:6

#回転の情報を入れる？SRSは関数で頑張る
#https://tetrisch.github.io/main/srs.html

#まず1つ目の階層がミノの種類。2つ目の階層に回転角度(90度ずつ、3つ目の階層にそれぞれのブロックの座標を入れる)
#node2Dの座標を原点にする。相対座標

#OK____LJSZT
#Oは飛ばす。回転に関係ないので
#Iは面倒他のミノの単純回転が3×3だとしてIだけは4×4とする。

var tetri_minos_inte = [
	
	[  [ [1,-1], [0,0], [1,0], [-1,0] ], #Lミノok
[ [-1,-1], [1,0], [-1,0], [0,0] ], #Jミノ ok
[ [0,0], [-1,0], [0,-1], [1,-1] ], #Sミノ ok
[ [0,0], [0,-1], [-1,-1], [1,0] ], #Zミノ ok
[ [0,0], [-1,0], [1,0], [0,-1] ], #Tミノ ok
[ [0,0], [-1,0], [-1,1], [0,1] ], #Oミノ
[ [1,-1], [2,-1], [-1,-1], [-2,-1] ]   ], #Iミノ

[  [ [0,1], [0,-1], [0,0], [1,1] ], #Lミノok
[ [0,1], [0,-1], [1,-1], [0,0] ], #Jミノ ok
[ [0,0], [0,-1], [1,0], [1,1] ], #Sミノ ok
[ [0,0], [1,0], [0,1], [1,-1] ], #Zミノ ok
[ [0,0], [1,0], [0,1], [0,-1] ], #Tミノ ok
[ [0,0], [-1,0], [-1,1], [0,1] ], #Oミノ
[ [1,2], [1,1], [1,-1], [1,-2] ]   ], #Iミノ ok?

[  [ [1,0], [0,0], [-1,0], [-1,1] ], #Lミノ ok
[ [1,1], [1,0], [-1,0], [0,0] ], #Jミノ ok
[ [0,0], [-1,1], [1,0], [0,1] ], #Sミノ ok
[ [0,0], [-1,0], [1,1], [0,1] ], #Zミノ ok
[ [0,0], [-1,0], [1,0], [0,1] ], #Tミノ ok
[ [0,0], [-1,0], [-1,1], [0,1] ], #Oミノ
[ [1,1], [2,1], [-1,1], [-2,1] ]   ],

[  [ [0,-1], [0,0], [0,1], [-1,-1] ], #Lミノ ok
[ [0,1], [0,-1], [-1,1], [0,0] ], #Jミノ ok
[ [0,1], [-1,-1], [-1,0], [0,0] ], #Sミノ ok
[ [0,0], [-1,0], [-1,1], [0,-1] ], #Zミノ ok
[ [0,0], [-1,0], [0,1], [0,-1] ], #Tミノ ok
[ [0,0], [-1,0], [-1,1], [0,1] ], #Oミノ
[ [-1,-2], [-1,-1], [-1,1], [-1,2] ]   ]
	
]

var tetri_minos_inte_keep = tetri_minos_inte

#ここで接地させる。
#mainノードから()_minoシーン？を消して同じ位置に()_mino_keepをつける
#Global.tetris_gridの対応する場所を1に変更する。
#spawn_now = trueにする
func to_ground():
	pass
	

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass
